name: Trigger auto deployment for demo-container

env:
  AZURE_CONTAINER_APP_NAME: demo-container
  AZURE_GROUP_NAME: demo-container
  AZURE_LOCATION: eastus
  AZURE_ENV_NAME: demo-env

on:

   Automatically trigger it when detected changes in repo. Remove comments to enable
  push:
    branches: 
      [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub container registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Build and push container image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/${{ env.REPO }}:${{ github.sha }}
          file: ./Dockerfile

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Create or Update Container App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            APP_NAME=${{ env.AZURE_CONTAINER_APP_NAME }}
            RESOURCE_GROUP=${{ env.AZURE_GROUP_NAME }}
            LOCATION=${{ env.AZURE_LOCATION }}
            ENV_NAME=${{ env.AZURE_ENV_NAME }}
            IMAGE="ghcr.io/${{ env.REPO }}:${{ github.sha }}"
            REGISTRY_SERVER="ghcr.io"
            REGISTRY_USER="${{ github.actor }}"
            REGISTRY_PASS="${{ secrets.PAT }}"

            az config set extension.use_dynamic_install=yes_without_prompt

            echo "🔍 Checking if resource group exists..."
            if ! az group show -n $RESOURCE_GROUP &>/dev/null; then
              echo "🆕 Creating resource group..."
              az group create -n $RESOURCE_GROUP -l $LOCATION
            fi

            echo "🔍 Checking if environment exists..."
            if ! az containerapp env show -n $ENV_NAME -g $RESOURCE_GROUP &>/dev/null; then
              echo "🆕 Creating environment..."
              az containerapp env create -n $ENV_NAME -g $RESOURCE_GROUP --location $LOCATION
            fi

            echo "🔍 Checking if container app exists..."
            if ! az containerapp show -n $APP_NAME -g $RESOURCE_GROUP &>/dev/null; then
              echo "🆕 Creating new container app..."
              az containerapp create \
                -n $APP_NAME \
                -g $RESOURCE_GROUP \
                --environment $ENV_NAME \
                --image $IMAGE \
                --cpu 2 \
                --memory 4Gi \
                --registry-server $REGISTRY_SERVER \
                --registry-username $REGISTRY_USER \
                --registry-password $REGISTRY_PASS
            else
              echo "🔄 Updating existing container app..."
              az containerapp registry set \
                -n $APP_NAME \
                -g $RESOURCE_GROUP \
                --server $REGISTRY_SERVER \
                --username $REGISTRY_USER \
                --password $REGISTRY_PASS
              
              az containerapp update \
                -n $APP_NAME \
                -g $RESOURCE_GROUP \
                --image $IMAGE \
                --cpu 2 \
                --memory 4Gi
            fi
